# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Publish launcher

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
          - RelWithDebInfo
          - MinSizeRel

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: ${{ github.event.inputs.build_type }}

permissions:
  contents: write

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    env:
      QT6_INSTALL_DIR: ${{ github.workspace }}
    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: '6.8.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        tools: 'tools_opensslv3_x64 tools_cmake tools_ninja tools_mingw1310'
        dir: ${{ env.QT6_INSTALL_DIR }}

    - name: CMake Action
      uses: threeal/cmake-action@v2
      with:
        source-dir: ${{ github.workspace }}
        build-dir: ${{ github.workspace }}/build
        generator: 'Ninja Multi-Config'
        options: |
          OPENSSL_ROOT_DIR=${{ env.QT6_INSTALL_DIR }}/Qt/Tools/OpenSSLv3/Win_x64
        build-args: '--config ${{ env.BUILD_TYPE }} --parallel'

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ env.BUILD_TYPE }}

    - name: Install
      run: cmake --install ${{ github.workspace }}/build --prefix ${{ github.workspace }}/dist

    # Copy DLLs needed to run launcher
    - name: Copy libraries (OpenSSL)
      working-directory: ${{ env.QT6_INSTALL_DIR }}/Qt/Tools/OpenSSLv3/Win_x64/bin/
      run: cp libcrypto-3-x64.dll,libssl-3-x64.dll ${{ github.workspace }}/dist/bin/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: launcher-${{ github.ref_name }}-win64
        path: ${{ github.workspace }}/dist/*

    - name: Packing
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      run: Compress-Archive -Path ${{ github.workspace }}/dist/* -Destination ${{ github.workspace }}/launcher-${{ github.ref_name }}-win64.zip

    - name: Release
      uses: softprops/action-gh-release@v2
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        files: ${{ github.workspace }}/launcher-${{ github.ref_name }}-win64.zip
        fail_on_unmatched_files: true
