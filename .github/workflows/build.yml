# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build launcher

on:
  push:
    tags:
      - "v*.*.*"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

permissions:
  contents: write

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: '6.8.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        tools: 'tools_opensslv3_x64'

    - name: Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DOPENSSL_ROOT_DIR=${{ env.IQTA_TOOLS }}/OpenSSLv3/Win_x64

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ env.BUILD_TYPE }}

    - name: Install
      run: cmake --install ${{ github.workspace }}/build --prefix ${{ github.workspace }}/dist

    # Copy DLLs needed to run launcher
    - name: Copy libraries (OpenSSL)
      working-directory: ${{ env.IQTA_TOOLS }}/OpenSSLv3/Win_x64/bin/
      run: cp libcrypto-3-x64.dll,libssl-3-x64.dll ${{ github.workspace }}/dist/bin/

    - name: Packing
      run: Compress-Archive -Path ${{ github.workspace }}/dist/* -Destination ${{ github.workspace }}/launcher-win64.zip

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ github.workspace }}/launcher-win64.zip
        fail_on_unmatched_files: true
